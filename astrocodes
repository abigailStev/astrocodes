#!/usr/bin/env python
"""Render an html page of astroonomy software packages.
Data is downloaded and cached as needed."""

import os
import json
import sys
import argparse
from collections import OrderedDict
from pprint import pprint
import glob
from datetime import datetime
import time
import shutil

import requests
from bs4 import BeautifulSoup
from jinja2 import Template

DATA_DIR = "data"
STATIC_DIR = "static"
OUTPUT_DIR = "output"

# PYPI_CLASSIFIER_URL: To get the URL for a given classifier, go to
# PyPI's "browse" page (https://pypi.python.org/pypi?%3Aaction=browse),
# browse to the classifier you want, and copy the URL.
PYPI_MAIN_URL = "https://pypi.python.org/pypi?%3Aaction=index"
PYPI_CLASSIFIER_URL = ("https://pypi.python.org/pypi"
                       "?:action=browse&show=all&c=387")
PYPI_PACKAGE_URL = "https://pypi.python.org/pypi/{0}/json"
PYPI_DIR = os.path.join(DATA_DIR, "pypi")

ASCL_URL = "http://ascl.net/code/json"
ASCL_FILE = os.path.join(DATA_DIR, "ascl.json")

PAGES_DIR = os.path.join(DATA_DIR, "pages")

def info(msg):
    """Print a line in blue (assumes we have a color terminal!)"""
    print("\033[1m\033[34m", "INFO:", msg, "\033[0m")


def urlretrieve(url, fname):
    """ Retrieve URL and write to a file.

    Parameters
    ----------
    url : str
        Specific URL to get using the 'requests' package.
    fname : str
        Name of file to write URLs to.

    """
    info("fetch " + url)
    r = requests.get(url)
    with open(fname, "w") as f:
        f.write(r.text)


def read_json(fname):
    """ Reads from file into JSON. """
    with open(fname, "r") as f:
        return json.load(f)


def write_json(d, fname):
    """ Writes JSON to file. """
    with open(fname, "w") as f:
        json.dump(d, f)


def parse_pypi_html(html_doc, terms=None, strip_version=False):
    """Parse HTML page with package listing from PyPI.

    Parameters
    ----------
    html_doc : str
        HTML document.

    terms : list of str, optional
        If given, only include a package in results if its description includes
        one or more of these terms.

    strip_version : bool, optional
        If True, expect the package name to include a version number and
        strip it off.

    Returns
    -------
    packages : dict
        Dictionary where keys are package names and values are descriptions.
    """

    soup = BeautifulSoup(html_doc)
    result = {}

    # main table on page has class 'list'. Get table data elements from it.
    for row in soup.select("table[class~=list] tr"):
        cells = row.select("td")

        # Header row has no <td>'s and last row has one <td>. Skip these.
        if len(cells) != 2:
            continue

        # first column has an <a href...> element containing the package name.
        name = cells[0].a.string
        description = cells[1].string
        if strip_version:
            name = name.split('\xa0')[0]

        # crop duplicates
        if name in result:
            continue

        # search terms
        if terms is None:
            result[name] = description
        elif description is not None:
            for term in terms:
                if term in description.lower():
                    result[name] = description
                    break

    return result


def load_pypi(clobber=False):
    """Load 'astronomy' packages listed on PyPI.

    This includes packages with Astronomy in the keywords,
    as well as packages with 'astro' or 'cosmo' in the description."""

    if not os.path.exists(PYPI_DIR):
        os.makedirs(PYPI_DIR)

    # Get names and descriptions of all "astronomy" packages.
    fname = os.path.join(PYPI_DIR, "packages.json")
    if not os.path.exists(fname) or clobber:
        info("fetch " + PYPI_CLASSIFIER_URL)
        r = requests.get(PYPI_CLASSIFIER_URL)
        info("parse " + PYPI_CLASSIFIER_URL)
        pkgs = parse_pypi_html(r.text)

        info("fetch " + PYPI_MAIN_URL)
        r = requests.get(PYPI_MAIN_URL)
        info("parse " + PYPI_MAIN_URL)
        pkgs2 = parse_pypi_html(r.text, terms=["astro", "cosmo"],
                                strip_version=True)
        pkgs.update(pkgs2)

        write_json(pkgs, fname)
    else:
        pkgs = read_json(fname)

    # Get and save data for each package
    result = {}
    for name in pkgs:
        url = PYPI_PACKAGE_URL.format(name)
        fname = os.path.join(PYPI_DIR, name + ".json")
        if not os.path.exists(fname) or clobber:
            urlretrieve(url, fname)
        result[name.lower()] = read_json(fname)

    return result


def load_ascl(clobber=False):
    """Load packages from the Astrophysics Source Code Library.

    Downloaded data is cached.

    Parameters
    ----------
    clobber : bool
        If true, re-fetch data even if cached data exists.

    Returns
    -------
    pkgs : dict
       Dictionary, keyed by the package title.
    """

    if not os.path.exists(ASCL_FILE) or clobber:
        urlretrieve(ASCL_URL, ASCL_FILE)
    pkgs = read_json(ASCL_FILE)

    # re-key packages on the title before returning.
    return {pkg["title"].split(":")[0].lower(): pkg
            for pkg in pkgs.values()}


def load_html_from_url(url, clobber=False):
    """Return HTML as string from URL. Caches downloaded files.

    Parameters
    ----------
    url : str
    clobber : bool
        If True, re-download, even if cached files are present.
    """

    if not os.path.exists(PAGES_DIR):
        os.makedirs(PAGES_DIR)

    # URLSs have slashes in them, so we can't use `url` as a filename
    # when caching the file. So, replace all slashes and colons with
    # '-' to create a filename where we will cache the page. Note that
    # this mapping isn't *completely* foolproof - there can be name
    # collisions! For example, github.com/user/page-name/ and
    # github.com/user/page/name/ will map to the same filename.
    safe_url = url.replace(':', '-').replace('/', '-')
    fname = os.path.join(PAGES_DIR, safe_url)
    if not os.path.exists(fname) or clobber:
        urlretrieve(url, fname)
    with open(fname, 'r') as f:
        return f.read()


def is_url_a_repo(url_string):
    """ Check if a given URL string is a GitHub or BitBucket repository URL
    (hopefully, the source code).

    TODO: Check 'github.com/*/*' and 'bitbucket.org/*/*', so that you know the \
    URL is directly to the repository directory.

    Parameters
    ----------
    url_string : str
        A URL scraped from href HTML tags on a website.

    Returns
    -------
    bool
        True if the URL is to a repository, False if it is not.
    """
    url_string = url_string.lower()
    if ("github.com" in url_string or \
            "bitbucket.org" in url_string or \
            "ftp://" in url_string) and \
            "/release" not in url_string and "/docs/" not in url_string:
        # print("URL is a repo! %s" % url_string)
        return True
        # TODO: could get rid of the 'and' parts and check later if there's
        # more than one 'source url' for a package, use the one without docs or
        # releases, otherwise just use it

    # print("URL is not a repo. %s" % url_string)
    return False


def parse_html_for_urls(html_doc):
    """ Parse the sourcepage HTML for URLs, and return a list of all URLs.

    Parameters
    ----------
    html_doc : str
        HTML document.

    Returns
    -------
    list of str
        URLs listed in 'a href' in the HTML document.
    """
    soup = BeautifulSoup(html_doc)
    urls = []

    # Scrape page for 'a href' links
    for link in soup.find_all('a'):

        # You found a link!
        # print("You found a link! %s" % link.get('href'))
        temp_link = link.get('href')

        # Crop duplicates
        if temp_link in urls or temp_link is None:
            continue

        # Append unique link to the URL list
        urls.append(temp_link)
    # print("URLs from this doc:")
    # pprint(urls)
    return urls


def check_sourcecode_url(source_url):
    """ Get the URL of the source code repository. Check for SSL errors while
    loading source html. URLs from the source webpage listed on PyPI or ASCL.

    Parameters
    ----------
     source_url : str
        The URL listed as the source or homepage of the software package.

    Returns
    -------
    str
        The URL of the source code's repository. Returns 'None' if no source
        code repository URL is found.
    """

    if is_url_a_repo(source_url):
        return source_url

    if '.' not in source_url and '/' not in source_url:
        return None

    try:
        source_html = load_html_from_url(source_url)
    except:  # Catches any error. Hoping that only SSL errors come up here.
        # print("URL gives SSL error: %s" % url)
        # Using tps:// instead of https:// to allow for ftps://
        if "tp://" in source_url:
            source_url = source_url.replace('tp://', 'tps://')
            try:
                source_html = load_html_from_url(source_url)
            except:
                return None
        elif "tps://" in source_url:
            source_url = source_url.replace('tps://', 'tp://')
            try:
                source_html = load_html_from_url(source_url)
            except:
                return None
        else:
            return None

    urls = parse_html_for_urls(source_html)

    for link in urls:
        if is_url_a_repo(link):
            return link

    return None


# TODO: use regex's
_LANG_KEYPHRASES = {"python": "Python",
                    "Python": "Python",
                    "Java": "Java",
                    "java": "Java",
                    "in C ": "C",
                    "in C,": "C",
                    "in C.": "C",
                    "C++": "C++",
                    "IDL": "IDL",
                    "FORTRAN": "Fortran",
                    "Fortran": "Fortran",
                    "fortran": "Fortran"}

def detect_language(s):
    """Stupid detection of programming language from a ASCL description"""

    for keyphrase, lang in _LANG_KEYPHRASES.items():
        if keyphrase in s:
            return lang

    return None


def main(clobber=False):
    """Do everything."""

    # Load PyPI packages
    pypi_pkgs = load_pypi(clobber=clobber)

    # Load ASCL packages
    ascl_pkgs = load_ascl(clobber=clobber)

    # clean empty links in ASCL (there is at least one)
    for pkg in ascl_pkgs.values():
        while '' in pkg["site_list"]:
            pkg["site_list"].remove('')

    # get set of all package names
    names = set(pypi_pkgs)
    names.update(ascl_pkgs)

    # combine packages
    packages = []
    for name in names:
        pkg = {"name": name,
               "urls": []}

        if name in pypi_pkgs:
            pypi_pkg = pypi_pkgs[name]
            pkg["pypi_url"] = pypi_pkg['info']['package_url']
            if "description" not in pkg:
                pkg["description"] = pypi_pkg['info']['summary']
            pkg["language"] = "Python"
            pkg["language_from"] = "because package listed on PyPI"
            if pypi_pkg["info"]["home_page"] is not None:
                pkg["urls"].append(pypi_pkg["info"]["home_page"])
            if pypi_pkg["info"]["docs_url"] is not None:
                pkg["urls"].append(pypi_pkg["info"]["docs_url"])

        if name in ascl_pkgs:
            ascl_pkg = ascl_pkgs[name]
            pkg["ascl_url"] = 'http://ascl.net/' + ascl_pkg['ascl_id']
            pkg["urls"].extend(ascl_pkg["site_list"])
            pkg["description"] = ascl_pkg["title"].split(':')[-1]
            if "language" not in pkg:
                lang = detect_language(ascl_pkg["abstract"])
                if lang is not None:
                    pkg["language"] = lang
                    pkg["language_from"] = "based on ASCL abstract"

        for url in pkg["urls"]:
            temp_link = check_sourcecode_url(url)
            # print("Source url: %s" % temp_link)
            pkg["sourcecode"] = temp_link
            # TODO: once it finds a sourcecode link, break out of for-loop

        packages.append(pkg)

    # print("\nDone with sourcecode URLs.\n")

    # sort by name
    packages.sort(key=lambda x: x["name"])

    # load HTML template
    with open(os.path.join(STATIC_DIR, "template.html")) as f:
        template_html = f.read()
    template = Template(template_html)

    # copy static files
    for subdir in ["css", "js", "style"]:
        src = os.path.join(STATIC_DIR, subdir)
        dst = os.path.join(OUTPUT_DIR, subdir)
        if not os.path.exists(dst):
            shutil.copytree(src, dst)

    # render and ouput page
    ctime = time.strftime('%Y %b %d %l:%M %p %Z')
    page = template.render(packages=packages,
                           last_generated=ctime)
    with open(os.path.join(OUTPUT_DIR, "index.html"), "w") as f:
        f.write(page)

    # TODO
    # Link-check ASCL URLs with HEAD requests - cut if all dead.


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("--clobber", default=False, action="store_true",
                        help="Refetch all data, even if cached.")
    args = parser.parse_args()
    main(clobber=args.clobber)
